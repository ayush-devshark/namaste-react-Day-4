1. Is ES6 mandatory for React ?
   - No ES6 is not mandatory in React. We need to use some other imports like 'create-react-class' for using the components functionality.
   - it given it in official docs, how we can use before es6 JS code for react, we need to use some other imports, can be found in react docs in detail.

2. How can we write comments in JSX ?
   - we can write any format of js comments inside {} in JSX. 

3. What is <React.Fragment></React.Fragment> and <></> ?
   - React Fragments lets you wrap list of react elements without adding any extra node to DOM.
   - <></> is shorter syntax for React.Fragment, except <></> can not have any key or attributes.
   - React.Fragment may have only key as an attribute

4. What is Virtual DOM ?
   - Virtual DOM is programming concept not exclusive to react. 
   - Where virtual representation of DOM/UI is kept in memory and synched with Real Dom by a library such as ReactDOM. (Reconciliation process).
   - In react Virtual DOM is represented by React elements since they are the objects representing the user interface.
   - React also uses internal objects called 'fibers' to hold additional information about component tree. They may be considered a part of "virtual DOM" implementation in react.
   - This enabled react to have declarative API, we just tell react what state UI needs to be in, and it makes sure DOM matches that state. This abstracts all event handling, manual DOM updating we otherwise had to do manually.

5. What is Reconciliation in React ?
   - It is process where react uses "diff" algorithm to compare old component tree to new one, so to render(update DOM) nodes of only changed react elements.
   - If elements are of different type in both trees, old one is destroyed new tree get mounted.
   - If there is change in attribute of element only that attribute or property gets updated.
   - The diffing starts from root element, and then recurses to children.
   - That is why react is fast, because ir uses "diff" algorithm.
   - Based on two assumptions :-
      1. Two elements of different types will produce different trees.
      2. The developer can hint at which child elements may be stable across different renders with a key prop.