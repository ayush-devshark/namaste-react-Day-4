1. How do we create Nested Routes react-router-dom configuration ?
   - In react-router-dom, we can pass an array to children property of route for creating nested routes.
   - Inside array we pass objects, where path and element fields are defined.
   - We should be careful to not include '/' before path string, as '/' to root directory
   - For our code to work we also need an <Outlet/> component, imported from react-router-dom, which acts as a placeholder, defined inside parent component, where nested-route data will appear.

2. What is the order of life cycle method calls in Class Based Components ?
   - There are 2 phases in which component calls lifecycle method.
   - 1. First is render phase in which 'constructor', 'render' method are called.
   - 2. Second is commit phase, where 'componentDidMount' will be called.
   - On update of component, first 'render' method will be called, then 'componentDidUpdate' will be called.
   - 'componentWillUnmount' be called just before component unmounts.

3. Why do we use 'componentDidMount' ?
   - This method is called, after initial 'render' is called.
   - Its a good place to make async calls, or setup any subscriptions.
   - We can show initial render with static data, and when we get actual data from API, we can setState, leading to component re-render, and our UI change. (rather than blank screen, till we fetch some data).


4. When do we use componentWillUnmount ? Show with example.
   - It is invoked immediately before component is unmounted and destroyed.
   - We can perform necessary cleanup in componentWillUnmount like unsubscribing to timeouts, intervals, event-listeners etc.
   - we should never call setState inside componentWillUnmount, because component will never be re-rendered.
     eg - 
      - we can do setInterval inside componentDidMount.
      - will keep on running even when component gets unmounted.
      - when component mounts again, a new interval will starts along with previous one.
      - to prevent this we can set reference of interval on 'this' object of Class
      - use the reference to in clearInterval method inside componentWillUnmount method.

5. Why do we use super (props) in constructor ?
   - The constructor is called before component is mounted.
   - We call super(props) before any other statement because we component is subclass of React.Component and we need 'this.props',  otherwise it will be undefined in constructor.
   - Even if we forgot to pass 'props' on super() method, react after running component constructor will set this.props, however inside constructor this.props will be undefined.
   - To prevent this we must call super(props) to ensure we have access to 'this.props' even before constructor exits.

6. Why can't we make callback function inside useEffect async ?
   - In useEffect we can only return nothing or cleanup function.
   - When we make callback function async it return a promise, which is not allowed in useEffect.
   - If we return something else like promise in useEffect, then cleanup function will never gets called.
   - making componentDidMount 'async' can be done, because we run our clean functions on 'componentWillUnmount'.

   

