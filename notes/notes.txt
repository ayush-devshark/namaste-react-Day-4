1. Why do we need a useEffect Hook ?
   - Effects lets us run some code after component rendering, so that component can be synchronized with some system outside of React.
   - Effects run at the end of the rendering process after the screen updates. This is a good time to synchronize the React components with some external system (like network or a third-party library).
   - “Effect” refers to the React-specific definition i.e. a side effect caused by rendering.
   - by useEffect we can declare 'Effects' in react.

2. What is Optional Chaining ?
   - Optional Chaining operator (?.) accesses object property or calls a function, if the object accessed or function called is undefined or null, the operator short circuits and return undefined.
   - Using optional chaining with function calls causes the expression to automatically return undefined instead of throwing an exception if the method isn't found.

3. What is difference between JS expression and JS statement ?
   - An expression is a bit of JavaScript code that produces a value.
   - Each statement is an instruction for the computer to do something.
   - Statements are the rigid structure that holds our program together, while expressions fill in the details.
   - Statements often have "slots" for expressions. We can put any expression we like into those slots.
   - For example, declaring a variable has an expression slot:
        let hi = /* some expression */;
   - Want to know whether a chunk of JS is an expression or a statement? Try to log it out!
        If it runs, the code is an expression. If you get an error, it's a statement (or, possibly, invalid JS).
   - Inside react squiggly brackets we can only include expressions, not statements. The squiggly brackets essentially create an expression slot within our JSX.
   - Expressions produce a value, and these values are slotted into statements. Expressions can't exist on their own, they are always part of a statement, even if that statement is otherwise empty. 
        /* expression slot */

