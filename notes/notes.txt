1. Why do we need a useEffect Hook ?
   - Effects lets us run some code after component rendering, so that component can be synchronized with some system outside of React.
   - Effects run at the end of the rendering process after the screen updates. This is a good time to synchronize the React components with some external system (like network or a third-party library).
   - “Effect” refers to the React-specific definition i.e. a side effect caused by rendering.
   - by useEffect we can declare 'Effects' in react.

2. What is Optional Chaining ?
   - Optional Chaining operator (?.) accesses object property or calls a function, if the object accessed or function called is undefined or null, the operator short circuits and return undefined.
   - Using optional chaining with function calls causes the expression to automatically return undefined instead of throwing an exception if the method isn't found.

3. What is difference between JS expression and JS statement ?
   - An expression is a bit of JavaScript code that produces a value.
   - Each statement is an instruction for the computer to do something.
   - Statements are the rigid structure that holds our program together, while expressions fill in the details.
   - Statements often have "slots" for expressions. We can put any expression we like into those slots.
   - For example, declaring a variable has an expression slot:
        let hi = /* some expression */;
   - Want to know whether a chunk of JS is an expression or a statement? Try to log it out!
        If it runs, the code is an expression. If you get an error, it's a statement (or, possibly, invalid JS).
   - Inside react squiggly brackets we can only include expressions, not statements. The squiggly brackets essentially create an expression slot within our JSX.
   - Expressions produce a value, and these values are slotted into statements. Expressions can't exist on their own, they are always part of a statement, even if that statement is otherwise empty. 
        /* expression slot */

4. What is Conditional rendering ? Explain with a code example.
   - In react we can conditionally render JSX using javaScript syntax like 'if' statements, '&&' and '? :' operators.
   - For example, if we want to display some data only when user is authenticated, and something else if not. We can do so like this :-
         if(!authenticated){
            return <p>Please Login First</p>
         }
         return <p>Welcome to your dashboard</p>

5. What is CORS ?
   - Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources.
   - CORS also relies on a mechanism by which browsers make a "preflight" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. 
   - In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request.
   - For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts. For example, XMLHttpRequest and the Fetch API follow the same-origin policy. 
   - This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers.

6. What is async and await ?
   - 'async' and 'await' keywords enables asynchronous, promise based behavior to be written in a cleaner style.
   - 'await' keyword makes promise returning functions behave as synchronous by suspending code execution until the returning promise is fulfilled or rejected.
   - The resolve value of promise is treated as the return value of await expression.
   - 'await' keyword is only valid inside async functions.
   - Async functions always return a promise. If the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise.

                        async function foo() {                     
                           return 1;                     
                        } 
             is equal to 

                        function foo() {
                           return Promise.resolve(1);
                        }
   - async function declarations are hoisted to the top of their scope and can be called anywhere in their scope.

7. What is the use of res.json() from response of fetch api ?
   - The json() method of the Response interface takes a Response stream and reads it to completion. It returns a promise which resolves with the result of parsing the body text as JSON.
   - Note that despite the method being named json(), the result is not JSON but is instead the result of taking JSON as input and parsing it to produce a JavaScript object.

8.  What is Shimmer UI ?
   - A version of UI that does not contain actual content. 
   - Mimics the page layout by showing similarly shaped elements to content, till the time content is loading and becomes available.
   - It is basically a wireframe of the page, with placeholders boxes for text and images.

9. What is a Microservice ?
   - Microservices, or microservices architecture, is an approach to application development in which a large application is built from modular components or services. Each module supports a specific task or business goal and uses a simple, well-defined interface, such as an application programming interface (API), to communicate with other sets of services.
   - These are - 
         Independently deployable, 
         Loosely coupled, 
         Organized around business capabilities, 
         Owned by a small team, 
         Highly maintainable and testable

10. What is Monolith architecture ?
    - Monolith means composed all in one piece. 
    - Monolithic software is designed to be self-contained, wherein the program's components or functions are tightly coupled rather than loosely coupled, like in modular software programs. 
    - In a monolithic architecture, each component and its associated components must all be present for code to be executed or compiled and for the software to run.
    - They tend to have large codebases, which can be cumbersome to manage over time.
    - Furthermore, if one program component must be updated, other elements may also require rewriting, and the whole application has to be recompiled and tested. 
    - The process can be time-consuming and may limit the agility and speed of software development teams.

11. What is the difference between Monolith and Microservice ?
    - Monolith is single tiered. Microservice are divided into smaller Independent services.
    - Monolith has large codebase. Microservices is collection of smaller code bases.
    - Monolith testing, compiling may take more time. Microservice are easier to test, compile by individual teams.
    - Monolith modules are tightly coupled, Microservice modules are loosely coupled.

    