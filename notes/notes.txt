1. Is ES6 mandatory for React ?
   - No ES6 is not mandatory in React. We need to use some other imports like 'create-react-class' for using the components functionality.
   - it given it in official docs, how we can use before es6 JS code for react, we need to use some other imports, can be found in react docs in detail.

2. How can we write comments in JSX ?
   - we can write any format of js comments inside {} in JSX. 

3. What is <React.Fragment></React.Fragment> and <></> ?
   - React Fragments lets you wrap list of react elements without adding any extra node to DOM.
   - <></> is shorter syntax for React.Fragment, except <></> can not have any key or attributes.
   - React.Fragment may have only key as an attribute

4. What is Virtual DOM ?
   - Virtual DOM is programming concept not exclusive to react. 
   - Where virtual representation of DOM/UI is kept in memory and synched with Real Dom by a library such as ReactDOM. (Reconciliation process).
   - In react Virtual DOM is represented by React elements since they are the objects representing the user interface.
   - React also uses internal objects called 'fibers' to hold additional information about component tree. They may be considered a part of "virtual DOM" implementation in react.
   - This enabled react to have declarative API, we just tell react what state UI needs to be in, and it makes sure DOM matches that state. This abstracts all event handling, manual DOM updating we otherwise had to do manually.

5. What is Reconciliation in React ?
   - It is process where react uses "diff" algorithm to compare old component tree to new one, so to render(update DOM) nodes of only changed react elements.
   - If elements are of different type in both trees, old one is destroyed new tree get mounted.
   - If there is change in attribute of element only that attribute or property gets updated.
   - The diffing starts from root element, and then recurses to children.
   - That is why react is fast, because ir uses "diff" algorithm.
   - Based on two assumptions :-
      1. Two elements of different types will produce different trees.
      2. The developer can hint at which child elements may be stable across different renders with a key prop.

4. What is React Fiber ?
   - It is re-implementation of react core "diff" algorithm.
   - The reconciler does the work of computing which parts of a tree have changed; the renderer then uses that information to actually update the rendered app.
   - This separation means that React DOM and React Native can use their own renderers while sharing the same reconciler, provided by React core.
   - Fiber reimplements the react reconciler. It is not principally concerned with rendering.

7. Why do we need keys in React ? When do we need keys in React ?
   - If we have same elements in react without unique attribute, react will mutate every child, even if not needed be. Example - when we add new <li> item over other <li> items. 
   - For this react uses 'key' attribute, which must be unique to element.
   - Key need to be unique among similar sibling elements, not globally unique.
   - Keys should be stable, predictable, and unique. Unstable keys (like those produced by Math.random()) will cause many component instances and DOM nodes to be unnecessarily recreated, which can cause performance degradation and lost state in child components.

8. Can we use index as keys in React ?
   - Although index as keys should not be preferred, as last resort we can use index as keys on elements that are not to be reordered.
   - if items get reordered it can cause performance issues, as when one element is deleted or added into list of items, other items shift from there place, thus changing there key value from earlier.
   - If the key is same as before React assumes that the DOM element represents the same component / element as before. But that is no longer true.

9. What is props in React ? 
   - "props" stands for properties, are object argument with data.
   - JSX attribute and children are passed into single JS object, known as "props"
   - props are read-only.
   - A component must never modify their own props. (like pure functions).

10. What is a Config Driven UI ?
   - In config driven UI we keep config in JSON format, which can be used to do all the mundane and repetitive tasks of rendering.
   - we can write code to loop over the config, and for each entry in the config, we determine it's component to be rendered based on type passed, and other data such as attributes etc.